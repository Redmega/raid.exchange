create table "public"."profile" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid not null,
    "created_at" timestamp with time zone default now(),
    "username" text not null,
    "avatar_url" text not null
);


alter table "public"."profile" enable row level security;

alter table "public"."profile" add constraint "profile_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) not valid;

alter table "public"."profile" validate constraint "profile_user_id_fkey";

create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into "public"."profile" (user_id, avatar_url, username)
  values (new.id, new.raw_user_meta_data->>'full_name',new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$;

create function public.handle_update_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
    update "public"."profile"
    set 
    avatar_url = new.raw_user_meta_data->>'avatar_url',
    username = new.raw_user_meta_data->>'full_name'
    where user_id = new.id;
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

create trigger on_auth_user_updated
  after update on auth.users
  for each row execute procedure public.handle_update_user();
